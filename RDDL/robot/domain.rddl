domain robot {

	requirements = {
        continuous,             // This domain uses real-valued parameterized variables
        reward-deterministic    // This domain does not use a stochastic reward
	};

	types {
		grid: object;
	};

    pvariables {
        // Constants
        MOVE_DISTANCE: {non-fluent, real, default = 1.0 };
        GOAL_MIN: {non-fluent, real, default = 9.0 };
        GOAL_MAX: {non-fluent, real, default = 10.0 };

        // state fluent
        pos_x_robot: {state-fluent, real, default = 0.0 }; // The x position of the robot
        // pos_y_robot: {state-fluent, real, default = 0.0 }; // The x position of the robot
        // reach_flag: {state-fluent, bool, default = false};

        // interm flugents
        //in_goal: {interm-fluent, bool};

        // Action fluents
        move_x: { action-fluent, bool, default = false}; // Action to move robot
        // move_y: { action-fluent, bool, default = false}; // Action to move robot

        
    };

    cpfs {
        

        //in_goal = (pos_x_robot <= 6) ^ (pos_x_robot >= 5);

        pos_x_robot' =  if (move_x) 
                            then pos_x_robot + MOVE_DISTANCE
                        else pos_x_robot;

        // pos_y_robot' =  if (move_y) 
        //                     then pos_y_robot + MOVE_DISTANCE
        //                 else pos_y_robot;

        // reach_flag' = if (in_goal)
        //                 then true
        //              else reach_flag;


    };

    reward = if ((pos_x_robot >= 5.0)) 
                then 1
             else 0;

}